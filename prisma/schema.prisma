generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Comment {
  id           String     @id(map: "comment_pk") @default(uuid()) @db.VarChar
  userId       String     @db.VarChar
  discussionId String     @db.VarChar
  text         String     @db.VarChar
  likes        Int?       @default(0)
  dislikes     Int?       @default(0)
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_discussion_id_fk")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "comment_user_id_fk")
}

model Discussion {
  id        String    @id(map: "discussion_pk") @default(uuid()) @db.VarChar
  text      String    @db.VarChar
  name      String    @db.VarChar
  websiteId String    @db.VarChar
  website   Website   @relation(fields: [websiteId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "discussion_website_id_fk")
  comment   Comment[]
}

model Token {
  id           String @id(map: "token_pk") @default(uuid()) @db.VarChar
  userId       String @db.VarChar
  refreshToken String @db.VarChar
  user         User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "token_user_id_fk")
}

model User {
  id             String    @id(map: "user_pk") @default(uuid()) @db.VarChar
  name           String    @db.VarChar
  email          String    @unique(map: "user_email_uindex") @db.VarChar
  password       String    @db.VarChar
  isActivated    Boolean?  @default(false)
  activationLink String?   @db.VarChar
  comment        Comment[]
  token          Token[]
  Website        Website   @relation(fields: [websiteId], references: [id])
  websiteId      String    @db.VarChar
}

model Website {
  id             String       @id(map: "website_pk") @default(uuid()) @db.VarChar
  url            String       @unique(map: "website_url_uindex") @db.VarChar
  name           String       @db.VarChar
  email          String       @unique(map: "website_email_uindex") @db.VarChar
  password       String       @db.VarChar
  isActivated    Boolean?     @default(false)
  activationLink String?      @db.VarChar
  token          String       @unique(map: "website_token_uindex") @default(uuid()) @db.VarChar
  discussion     Discussion[]
  User           User[]
}
